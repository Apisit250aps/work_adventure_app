import 'package:get/get.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:work_adventure/controllers/character_controller.dart';
import 'package:work_adventure/controllers/table_controller.dart';
import 'package:wakelock_plus/wakelock_plus.dart';

class LogEntry {
  final String icon;
  final String title;
  final String description;
  final DateTime timestamp;

  LogEntry({
    required this.icon,
    required this.title,
    required this.description,
    required this.timestamp,
  });
}

class MonsterName {
  final String emoji;
  final String name;
  final Color color;

  MonsterName(this.emoji, this.name, this.color);

  @override
  String toString() => '$emoji $name';
}

class ItemName {
  final String emoji;
  final String name;
  final Color color;

  ItemName(this.emoji, this.name, this.color);

  @override
  String toString() => '$emoji $name';
}

class FocusController extends GetxController {
  // Controllers
  final CharacterController _characterController =
      Get.find<CharacterController>();
  final TableController _tableController = Get.find<TableController>();

  // Observable variables
  RxInt _timeRemaining = 600.obs;
  final RxInt _totalTime = 600.obs;
  final RxBool _isActive = false.obs;
  final RxList<LogEntry> _adventureLog = <LogEntry>[].obs;
  final RxString _currentEncounterIcon = "üåü".obs;
  final RxString _currentEncounterDescription =
      "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢...\n‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏£‡∏±‡∏ß‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏û‡∏•‡∏∏‡πà‡∏á‡∏û‡∏•‡πà‡∏≤‡∏ô".obs;
  final RxInt eventCount = 0.obs;
  final RxBool _showingSummary = false.obs;
  RxInt spCounter = 0.obs;
  RxInt regenerationCounter = 0.obs;
  RxInt focusCounter = 0.obs;
  RxBool mustSender = false.obs;
  final RxBool isResting = false.obs;
  final RxInt _restTimeRemaining = 0.obs;
  final RxBool isDead = false.obs;
  final RxInt deathTimeRemaining = 0.obs;
  RxInt damageInput = 0.obs;
  RxInt expInput = 0.obs;
  RxInt coinInput = 0.obs;

  RxInt runBar = 0.obs;
  RxInt dieBar = 0.obs;
  RxInt restBar = 0.obs;

  RxInt eventIntervalSeconds = 0.obs;
  RxInt restMaxBar = 0.obs;

  // Timers
  Timer? _timer;
  Timer? _eventTimer;
  Timer? _restTimer;
  Timer? _reviveTimer;

  // Other variables
  int rollOne = 0;
  String enemyQuestName = "";
  RxInt enemyQuestCounter = 0.obs;
  bool questIsActive = false;
  int questNumber = 21;
  int questGold = 0;
  int questExp = 0;
  int questEnemyNumber = 0;
  bool isRest = false;

  // Colors
  final Color commonColor = Colors.green;
  final Color uncommonColor = Colors.blue;
  final Color rareColor = Colors.purple;
  final Color epicColor = Colors.orange;

  late List<List<MonsterName>> enemy;

  // Getters
  int get totalTime => _totalTime.value;
  int get timeRemaining => _timeRemaining.value;
  bool get isActive => _isActive.value;
  List<LogEntry> get adventureLog => _adventureLog.toList();
  String get currentEncounterIcon => _currentEncounterIcon.value;
  String get currentEncounterDescription => _currentEncounterDescription.value;
  bool get showingSummary => _showingSummary.value;
  int get restDuration => _tableController.restTimer;
  int get _eventIntervalSeconds => _tableController.timeEventRun;

  late List<List<ItemName>> items;

  @override
  void onInit() {
    super.onInit();
    WakelockPlus.enable();
    restMaxBar.value = _tableController.restTimer;
    eventIntervalSeconds.value = _tableController.timeEventRun;
    _initializeEnemies();
    _initializeItems();
    _setupTableControllerListener();
  }

  void _initializeEnemies() {
    enemy = [
      [
        MonsterName("üê∫", "‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏à‡∏¥‡πã‡∏ß", commonColor),
        MonsterName("ü¶á", "‡∏Ñ‡πâ‡∏≤‡∏á‡∏Ñ‡∏≤‡∏ß‡∏£‡∏≤‡∏ï‡∏£‡∏µ", commonColor),
        MonsterName("üêó", "‡∏´‡∏°‡∏π‡∏õ‡πà‡∏≤‡∏û‡∏¥‡∏Ü‡∏≤‡∏ï", commonColor),
        MonsterName("ü¶ä", "‡∏à‡∏¥‡πâ‡∏á‡∏à‡∏≠‡∏Å‡πÑ‡∏ü", commonColor),
        MonsterName("üêç", "‡∏≠‡∏™‡∏£‡∏û‡∏¥‡∏©", commonColor)
      ],
      [
        MonsterName("üßü", "‡∏ã‡∏≠‡∏°‡∏ö‡∏µ‡πâ‡∏£‡∏≤‡∏ä‡∏≤", uncommonColor),
        MonsterName("üíÄ", "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏≠‡∏°‡∏ï‡∏∞", uncommonColor),
        MonsterName("üßõ", "‡πÅ‡∏ß‡∏°‡πÑ‡∏û‡∏£‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏¢‡πá‡∏ô", uncommonColor),
        MonsterName("üê≤", "‡∏°‡∏±‡∏á‡∏Å‡∏£‡πÑ‡∏ü‡∏ô‡∏£‡∏Å", uncommonColor),
        MonsterName("üßô", "‡∏û‡πà‡∏≠‡∏°‡∏î‡∏°‡∏£‡∏ì‡∏∞", uncommonColor)
      ],
      [
        MonsterName("üêâ", "‡∏°‡∏±‡∏á‡∏Å‡∏£‡∏ó‡∏°‡∏¥‡∏¨", rareColor),
        MonsterName("üíÄ", "‡∏£‡∏≤‡∏ä‡∏≤‡∏•‡∏¥‡∏ä‡∏≠‡∏ô‡∏ò‡∏Å‡∏≤‡∏£", rareColor),
        MonsterName("üåë", "‡∏õ‡∏µ‡∏®‡∏≤‡∏à‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î", rareColor),
        MonsterName("üßõüèª", "‡πÄ‡∏à‡πâ‡∏≤‡πÅ‡∏ß‡∏°‡πÑ‡∏û‡∏£‡πå‡πÑ‡∏£‡πâ‡∏û‡πà‡∏≤‡∏¢", rareColor),
        MonsterName("üßôüèª", "‡∏à‡∏≠‡∏°‡∏°‡∏≤‡∏£‡πÅ‡∏´‡πà‡∏á‡∏´‡∏≤‡∏¢‡∏ô‡∏∞", rareColor)
      ],
      [
        MonsterName("üíÄ", "‡∏£‡∏≤‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì", epicColor),
        MonsterName("‚è≥", "‡πÄ‡∏ó‡∏û‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏•‡πÄ‡∏ß‡∏•‡∏≤", epicColor),
        MonsterName("üó°Ô∏è", "‡∏≠‡∏±‡∏®‡∏ß‡∏¥‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î", epicColor),
        MonsterName("üåô", "‡πÄ‡∏ó‡∏û‡∏à‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô", epicColor),
        MonsterName("üßô", "‡∏à‡∏≠‡∏°‡πÄ‡∏ß‡∏ó‡πÅ‡∏´‡πà‡∏á‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå", epicColor)
      ]
    ];
  }

  void _initializeItems() {
    items = [
      [
        ItemName("üì¶", "‡∏´‡∏µ‡∏ö‡πÑ‡∏°‡πâ‡∏ú‡∏∏", commonColor),
        ItemName("üëù", "‡∏ñ‡∏∏‡∏á‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏Å‡πà‡∏≤", commonColor),
        ItemName("ü™ô", "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏ô‡∏¥‡∏°", commonColor),
        ItemName("üíç", "‡πÅ‡∏´‡∏ß‡∏ô‡∏ó‡∏≠‡∏á‡∏´‡∏°‡∏≠‡∏á", commonColor),
        ItemName("‚õìÔ∏è", "‡∏™‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏ö‡∏£‡∏≤‡∏ì", commonColor)
      ],
      [
        ItemName("üóÉÔ∏è", "‡∏´‡∏µ‡∏ö‡πÇ‡∏•‡∏´‡∏∞‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö", uncommonColor),
        ItemName("üéí", "‡∏ñ‡∏∏‡∏á‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå", uncommonColor),
        ItemName("üí∞", "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏≤‡∏ä‡∏ß‡∏á‡∏®‡πå", uncommonColor),
        ItemName("üíé", "‡πÅ‡∏´‡∏ß‡∏ô‡∏≠‡∏±‡∏ç‡∏°‡∏ì‡∏µ‡πÄ‡∏£‡∏∑‡∏≠‡∏á", uncommonColor),
        ItemName("ü¶™", "‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏°‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡∏£‡∏≠‡∏á", uncommonColor)
      ],
      [
        ItemName("üè∫", "‡∏´‡∏µ‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÇ‡∏ö‡∏£‡∏≤‡∏ì", rareColor),
        ItemName("üéá", "‡∏ñ‡∏∏‡∏á‡∏°‡∏±‡∏á‡∏Å‡∏£", rareColor),
        ItemName("üî∂", "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏à‡∏±‡∏Å‡∏£‡∏û‡∏£‡∏£‡∏î‡∏¥", rareColor),
        ItemName("üëë", "‡πÅ‡∏´‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏±‡∏ô‡∏¢‡πå", rareColor),
        ItemName("üß¨", "‡∏™‡∏£‡πâ‡∏≠‡∏¢‡πÑ‡∏Ç‡πà‡∏°‡∏∏‡∏Å‡∏ß‡∏¥‡πÄ‡∏®‡∏©", rareColor)
      ],
      [
        ItemName("‚è≥", "‡∏´‡∏µ‡∏ö‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏•‡πÄ‡∏ß‡∏•‡∏≤", epicColor),
        ItemName("üåå", "‡∏ñ‡∏∏‡∏á‡∏™‡∏≤‡∏£‡∏û‡∏±‡∏î‡∏ô‡∏∂‡∏Å", epicColor),
        ItemName("üåü", "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏ó‡∏û‡πÄ‡∏à‡πâ‡∏≤", epicColor),
        ItemName("üí´", "‡πÅ‡∏´‡∏ß‡∏ô‡∏Ñ‡∏£‡∏≠‡∏á‡∏û‡∏¥‡∏†‡∏û", epicColor),
        ItemName("üîÆ", "‡∏™‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏´‡πà‡∏á‡πÇ‡∏ä‡∏Ñ‡∏ä‡∏∞‡∏ï‡∏≤", epicColor)
      ]
    ];
  }

  void _setupTableControllerListener() {
    ever(_tableController.special, (_) {
      if (_isActive.value) {
        _startEventTimer();
      }
    });
  }

  // Session management methods
  void initFocus(int minutes) {
    _totalTime.value = minutes * 60;
    _timeRemaining.value = _totalTime.value;
    _resetSessionState();
    _addLogEntry("üèÅ", "Adventure Start", "Your journey begins!");
  }

  void toggleActive() {
    _isActive.toggle();
    if (_isActive.value) {
      _startSession();
    } else {
      pauseFocus();
    }
  }

  void _startSession() {
    _resetSessionVariables();
    _startTimer();
    _startEventTimer();
    _addLogEntry("üèÅ", "Adventure Start", "Your journey begins!");
  }

  void resetFocus() {
    pauseFocus();
    _timeRemaining.value = _totalTime.value;
    _resetSessionVariables();
    _resetQuestVariables();
    _addLogEntry("üîÑ", "Reset", "Your adventure has been reset.");
  }

  void pauseFocus() {
    _stopTimers();
    _isActive.value = false;
    isResting.value = false;
    isDead.value = false;
  }

  void _resetSessionVariables() {
    _adventureLog.clear();
    _currentEncounterIcon.value = "üåü";
    _currentEncounterDescription.value =
        "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢...\n‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏£‡∏±‡∏ß‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏û‡∏•‡∏∏‡πà‡∏á‡∏û‡∏•‡πà‡∏≤‡∏ô";
    eventCount.value = 0;
    _showingSummary.value = false;
    spCounter.value = 0;
    regenerationCounter.value = 0;
    focusCounter.value = 0;
    mustSender.value = false;
    _restTimeRemaining.value = 0;
    deathTimeRemaining.value = 0;
    damageInput.value = 0;
    expInput.value = 0;
    coinInput.value = 0;
    runBar = 0.obs;
    dieBar = 0.obs;
    restBar = 0.obs;
  }

  void _resetQuestVariables() {
    enemyQuestName = "";
    enemyQuestCounter.value = 0;
    questIsActive = false;
    questNumber = 21;
    questGold = 0;
    questExp = 0;
    questEnemyNumber = 0;
    isRest = false;
  }

  void _stopTimers() {
    _timer?.cancel();
    _eventTimer?.cancel();
    _restTimer?.cancel();
    _reviveTimer?.cancel();
  }

  void showSummary() {
    _showingSummary.value = true;
    _addLogEntry("üèÅ", "Summary", "Adventure completed!");
  }

  // Timer methods
  void _startTimer() {
    _timer = Timer.periodic(const Duration(seconds: 1), (_) {
      _timeRemaining--;

      if (isDead.value) {
        dieBar++;
      } else {
        dieBar.value = 0;
      }
      if (isResting.value) {
        restBar++;
      } else {
        restBar.value = 0;
      }

      if (!isDead.value && !isResting.value) {
        runBar++;
      }

      if (runBar.value >= _eventIntervalSeconds) {
        runBar.value = 0;
      }

      if (_timeRemaining.value <= 0) {
        mustSender.value = true;
      }
      updateServerSystem();
      focusSystem();
      if (_timeRemaining.value > 0) {
        generationSystem();
      } else {
        _endSession();
      }
    });
  }

  void updateServerSystem() {
    if (_characterController.isLevelup(expInput.value) || mustSender.value) {
      _characterController.focusSender(expInput.value, coinInput.value);
      expInputReset();
      coinInputReset();
      mustSenderReset();
    }
  }

  void focusSystem() {
    focusCounter++;
    if (focusCounter.value >= 600) {
      _characterController.additionalFocus();
      focusCounterReset();
    }
  }

  void generationSystem() {
    regenerationCounter++;
    if (_tableController.timeToRegenerate(regenerationCounter.value)) {
      if (!isDead.value && !isResting.value) {
        print("Regeneration is working");
        damageInput.value -=
            _tableController.healthRegeneration.clamp(0, damageInput.value);
        print("damge after: ${damageInput.value} ");
      }
      regenerationCounter.value = 0;
    }
  }

  void _startEventTimer() {
    _eventTimer?.cancel();
    if (isDead.value) {
      isDead.value = false;
      damageInput.value ~/= 2;
      spCounter.value = 0;
    }
    _eventTimer = Timer.periodic(Duration(seconds: _eventIntervalSeconds), (_) {
      if (_isActive.value &&
          _timeRemaining.value > 0 &&
          isDead.value == false) {
        generateEvent();
      }
    });
  }

  void _startRestTimer() {
    _eventTimer?.cancel();
    _restTimer?.cancel();

    final totalStaminaToRecover = _tableController.calculateCharacterStamina;
    final staminaPerSecond = totalStaminaToRecover / restDuration;

    _restTimer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (_restTimeRemaining.value > 0) {
        int restTime = restDuration;
        _restTimeRemaining.value--;

        final elapsedTime = restTime - _restTimeRemaining.value;
        final recoveredStamina = (staminaPerSecond * elapsedTime).floor();

        spCounter.value = totalStaminaToRecover - recoveredStamina;
      } else {
        spCounter.value = 0;
        isResting.value = false;
        _restTimer?.cancel();
        _startEventTimer();
      }
    });
  }

  void _startReviveTimer() {
    _eventTimer?.cancel();
    _reviveTimer?.cancel();
    _reviveTimer = Timer(Duration(seconds: deathTimeRemaining.value), () {
      _reviveTimer?.cancel();

      _startEventTimer();
    });
  }

  void _endSession() {
    _resetQuestVariables();
    _resetSessionVariables();
    _stopTimers();
    _isActive.value = false;
    showSummary();
  }

  void _resetSessionState() {
    _isActive.value = false;
    isResting.value = false;
    _adventureLog.clear();
    _currentEncounterIcon.value = "üåü";
    _currentEncounterDescription.value = "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢...\n";
    eventCount.value = 0;
    _showingSummary.value = false;
    spCounter.value = 0;
    _restTimeRemaining.value = 0;
  }

  void expInputReset() {
    expInput.value = 0;
  }

  void coinInputReset() {
    coinInput.value = 0;
  }

  void focusCounterReset() {
    focusCounter.value = 0;
  }

  void mustSenderReset() {
    mustSender.value = false;
  }

  // Event generation methods
  void generateEvent() {
    spCounter++;
    if (_tableController.timeToRest(spCounter.toInt())) {
      _generateRestEvent();
    } else {
      _generateRandomEvent();
    }
  }

  void _generateRandomEvent() {
    // ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
    int runEvent = _tableController.generateRandomEvent();

    if (runEvent == 0) {
      _generateEnemyEvent();
    } else if (runEvent == 1) {
      _generateNothingEvent();
    } else if (runEvent == 2) {
      if (!questIsActive) {
        _generateVillageEvent();
      } else {
        _generateEnemyEvent();
      }
    } else {
      _generateTreasureEvent();
    }
  }

  void _generateVillageEvent() {
    questIsActive = true;
    final villageType = _getRandomVillageType();
    final questDifficulty = _tableController.selectQuest;
    questNumber = questDifficulty;
    final MonsterName questDescription = _getQuestDescription(questDifficulty);
    final enemyCount = _tableController.enemyCount(questDifficulty);
    questEnemyNumber = enemyCount;
    final (exp, gold) = _tableController.questReward(questDifficulty);
    questExp = exp;
    questGold = gold;
    enemyQuestName = (questDescription).toString();

    _updateEncounter("üè°", """
    $villageType
    ‡πÄ‡∏Ñ‡∏ß‡∏™: ‡∏Å‡∏≥‡∏à‡∏±‡∏î ${questDescription.toString()} $enemyCount ‡∏ï‡∏±‡∏ß
    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å: ${_getQuestDifficulty(questDifficulty)}
    ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: $exp EXP, $gold Gold
    """);

    _addLogEntry("üè°", "Village", "‡∏û‡∏ö $villageType ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™: ");
  }

  void _generateNothingEvent() {
    _updateEncounter("‚õÖ",
        "‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏°‡πâ‡πÅ‡∏ï‡πà‡πÄ‡∏á‡∏≤\n‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏°‡∏≤‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö\n‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢");
    _addLogEntry(
        "üåü", "Peaceful", "You continue your journey without incident.");
  }

  void _generateEnemyEvent() {
    final index = TableController().getEnemyIndex(questNumber, questIsActive);
    final MonsterName enemy = _getRandomEnemy(index);
    final (enemyCoin, enemyDamage, enemyEXP) = _calculateEnemyStats(index);

    final battleDescription =
        _getBattleDescription(index, enemy, enemyDamage, enemyEXP, enemyCoin);
    _updateEncounter(enemy.emoji, battleDescription);
    _addLogEntry(
        "‚öîÔ∏è", "Battle", "Encountered a ${enemy.name}! $battleDescription");

    damageInput += (enemyDamage)
        .clamp(0, (_tableController.calculateCharacterHP - damageInput.value));
    print("damge before: ${damageInput.value} ");

    if (_tableController.healthReduceCondition(damageInput.value)) {
      if (questIsActive && enemyQuestName == enemy.toString()) {
        enemyQuestCounter.value++;
        if (enemyQuestCounter.value == questEnemyNumber) {
          expInput += questExp;
          coinInput += questGold;
          questReset();
        }
      }

      expInput += enemyEXP;
      coinInput += enemyCoin;
    } else {
      _handleCharacterDeath(enemy);
    }
  }

  void questReset() {
    questIsActive = false;
    questEnemyNumber = 0;
    questExp = 0;
    questGold = 0;
    questNumber = 0;
    enemyQuestCounter.value = 0;
  }

  void _handleCharacterDeath(MonsterName enemy) {
    mustSender.value = true;
    isDead.value = true;
    runBar.value = 0;
    spCounter.value = _tableController.calculateCharacterStamina;
    deathTimeRemaining.value = _tableController.timeTodie;
    final deathMessage = _getDeathMessage(enemy.toString());
    _updateEncounter("üíÄ", deathMessage);
    _addLogEntry("üíÄ", "Death", "Your character has fallen in battle.");

    _startReviveTimer();
  }

  void _generateRestEvent() {
    isResting.value = true;
    mustSender.value = true;
    runBar.value = 0;
    int healing = _tableController.restHealing;
    int restDurationShow = restDuration;
    damageInput.value -= (healing).clamp(0, damageInput.value);

    String selectedDialogue = _getRandomRestDialogue();

    _updateEncounter("üèïÔ∏è",
        "$selectedDialogue\n‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï $healingüî∫\n‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏ô‡∏ò‡∏¢‡∏≤‡∏à‡∏ô‡∏£‡∏∏‡πà‡∏á‡∏™‡∏≤‡∏á");
    _addLogEntry("üèïÔ∏è", "‡∏û‡∏±‡∏Å",
        "$selectedDialogue\nHP $healing ‡πÄ‡∏ß‡∏•‡∏≤ $restDurationShow ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");

    _restTimeRemaining.value = restDuration;
    _startRestTimer();
  }

  // Helper methods
  void _updateEncounter(String icon, String description) {
    _currentEncounterIcon.value = icon;
    _currentEncounterDescription.value = description;
  }

  void _addLogEntry(String icon, String title, String description) {
    _adventureLog.insert(
        0,
        LogEntry(
          icon: icon,
          title: title,
          description: description,
          timestamp: DateTime.now(),
        ));
  }

  double _getSpecialPercentage(int value) => value / 100;

  String _getRandomVillageType() {
    final villageTypes = [
      "üèòÔ∏è ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ä‡∏≤‡∏ß‡∏ô‡∏≤",
      "üè† ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ä‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏á",
      "üèöÔ∏è ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡∏£‡∏ö",
      "üè∞ ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡πà‡∏≠‡∏°‡∏î",
      "üóª ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏π‡πÄ‡∏Ç‡∏≤"
    ];
    return villageTypes[Random().nextInt(villageTypes.length)];
  }

  MonsterName _getQuestDescription(int difficulty) {
    return enemy[difficulty][Random().nextInt(enemy[difficulty].length)];
  }

  MonsterName _getRandomEnemy(int index) {
    return enemy[index][Random().nextInt(enemy[index].length)];
  }

  String _getQuestDifficulty(int difficulty) {
    final questDifficulties = ["‡∏á‡πà‡∏≤‡∏¢", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢", "‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"];
    return questDifficulties[difficulty];
  }

  (int, int, int) _calculateEnemyStats(int index) {
    int baseMax = (2 *
            (_characterController
                .calculateLevel(_characterController.currentExp))) +
        6;

    int baseMin =
        (_characterController.calculateLevel(_characterController.currentExp)) +
            3;
    final multipliers = [
      [2, 1, 1],
      [4, 2, 2],
      [8, 6, 5],
      [16, 13, 11]
    ];
    final baseValue = (Random().nextInt(baseMax).clamp(baseMin, baseMax)) *
        (_tableController.levelMultiplier).round();

    int coin = ((baseValue) * multipliers[index][1]).toInt();
    int damage = (baseValue * multipliers[index][2]).toInt();
    int exp = (((rollOne + 5).clamp(5, 20)) * multipliers[index][0]).toInt();

    return (
      _tableController.calculateCoin(coin, index),
      _tableController.calculateDamage(damage),
      _tableController.calculateEXP(exp)
    );
  }

  String _getBattleDescription(
      int index, MonsterName enemy, int damage, int exp, int coin) {
    final battleDescriptions = [
      [
        "${enemy.toString()} ‡∏û‡∏∏‡πà‡∏á‡∏î‡∏±‡πà‡∏á‡∏™‡∏≤‡∏¢‡∏ü‡πâ‡∏≤\n‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏ã‡πá‡∏ô $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÅ‡∏´‡∏•‡∏Å‡∏•‡∏≤‡∏ç $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ï‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏á‡πÄ‡∏•‡πá‡∏ö\n‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏±‡πà‡∏ô $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏•‡πâ‡∏°‡∏Ñ‡∏£‡∏∑‡∏ô $expüßø $coinüí∞",
        "${enemy.toString()} ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÑ‡∏£‡πâ‡∏õ‡∏£‡∏≤‡∏ô‡∏µ\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡∏â‡∏µ‡∏Å $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏Ç‡∏≤‡∏î‡∏ß‡∏¥‡πà‡∏ô $expüßø $coinüí∞",
        "${enemy.toString()} ‡πÇ‡∏ú‡∏•‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏≤\n‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏∏‡πà‡∏á $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏¢‡∏±‡∏ö‡πÄ‡∏¢‡∏¥‡∏ô $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏Ñ‡∏≥‡∏£‡∏≤‡∏°‡∏™‡∏ô‡∏±‡πà‡∏ô\n‡πÅ‡∏ú‡∏•‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏™‡∏ö $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏∏‡∏¢‡∏ú‡∏á $expüßø $coinüí∞"
      ],
      [
        "${enemy.toString()} ‡πÇ‡∏â‡∏ö‡∏î‡∏±‡πà‡∏á‡∏û‡∏≤‡∏¢‡∏∏\n‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏î $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÅ‡∏´‡∏•‡∏Å‡∏•‡∏≤‡∏ç $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏£‡∏∏‡∏°‡πÄ‡∏£‡πâ‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏° $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏Ç‡∏≤‡∏î‡∏™‡∏∞‡∏ö‡∏±‡πâ‡∏ô $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ñ‡∏µ‡∏ö‡∏ó‡∏£‡∏á‡∏û‡∏•‡∏±‡∏á\n‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ß $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏•‡πâ‡∏°‡πÑ‡∏°‡πà‡∏•‡∏∏‡∏Å $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏´‡∏°‡∏∏‡∏ô‡∏î‡∏±‡πà‡∏á‡∏ó‡∏≠‡∏£‡πå‡∏ô‡∏≤‡πÇ‡∏î\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡∏Ç‡∏≤‡∏î $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏∏‡∏•‡∏µ $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ó‡∏∞‡∏¢‡∏≤‡∏ô‡∏ü‡∏≤‡∏î‡∏ü‡∏±‡∏ô\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏£‡∏∏‡∏ô $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÑ‡∏´‡∏°‡πâ‡πÄ‡∏Å‡∏£‡∏µ‡∏¢‡∏° $expüßø $coinüí∞"
      ],
      [
        "${enemy.toString()} ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏ó‡∏≥‡∏•‡∏≤‡∏¢\n‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏∞‡∏•‡∏±‡∏Å $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏¥‡πâ‡∏ô‡∏ã‡∏≤‡∏Å $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏û‡∏∏‡πà‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏™‡∏≤‡∏¢‡∏ï‡∏≤\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏´‡∏•‡∏Å $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏´‡∏≤‡∏¢‡∏ß‡∏±‡∏ö $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ó‡∏∞‡∏•‡∏∏‡∏°‡∏¥‡∏ï‡∏¥‡πÇ‡∏à‡∏°‡∏ï‡∏µ\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏´‡∏°‡πâ $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏π‡∏ç‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á $expüßø $coinüí∞",
        "${enemy.toString()} ‡πÅ‡∏ú‡πà‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏•‡πâ‡∏ô‡∏ü‡πâ‡∏≤\n‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏•‡∏≤‡∏¢ $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏†‡∏û $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ç‡∏ì‡∏∞\n‡∏à‡∏¥‡∏ï‡∏ó‡πà‡∏≤‡∏ô‡∏î‡∏±‡∏ö $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏∏‡∏Å‡∏°‡∏¥‡∏ï‡∏¥ $expüßø $coinüí∞"
      ],
      [
        "${enemy.toString()} ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ó‡∏±‡πà‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡∏Å $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏à‡∏£‡∏¥‡∏á $expüßø $coinüí∞",
        "${enemy.toString()} ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå\n‡∏ï‡∏±‡∏ß‡∏ó‡πà‡∏≤‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢ $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡πâ‡∏ô‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡πà‡∏á $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏Å‡∏é‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥\n‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏• $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏î‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á\n‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏ó‡∏£‡∏á‡∏à‡∏≥ $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏π‡πà‡πÑ‡∏£‡πâ‡∏ï‡∏±‡∏ß‡∏ï‡∏ô $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏ï‡∏£‡∏£‡∏Å‡∏∞\n‡∏ó‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏•‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏• $expüßø $coinüí∞"
      ]
    ];

    return battleDescriptions[index]
        [Random().nextInt(battleDescriptions[index].length)];
  }

  String _getDeathMessage(String enemy) {
    final deathMessages = [
      '${enemy.toString()} ‡∏¢‡∏∑‡∏ô‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏¢‡∏¥‡πâ‡∏°\n‡πÄ‡∏á‡∏≤‡∏£‡πà‡∏≤‡∏á‡∏™‡∏±‡πà‡∏ô‡πÑ‡∏´‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á‡∏£‡∏¥‡∏ö‡∏´‡∏£‡∏µ‡πà',
      '${enemy.toString()} ‡∏õ‡∏•‡∏¥‡∏î‡∏ä‡∏µ‡∏û‡∏ó‡πà‡∏≤‡∏ô\n‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î‡πÅ‡∏•‡πà‡∏ô‡∏ú‡πà‡∏≤‡∏ô ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏ç',
      '${enemy.toString()} ‡∏¢‡∏∑‡∏ô‡∏°‡∏≠‡∏á‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞\n‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏á‡∏±‡∏ô ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏Ñ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∞‡∏Ñ‡∏•‡∏∏‡πâ‡∏á',
      '${enemy.toString()} ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡∏∞‡∏Å‡πâ‡∏≠‡∏á\n‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏ß‡∏≤‡∏î‡∏´‡∏ß‡∏±‡πà‡∏ô',
      '${enemy.toString()} ‡∏ó‡∏≠‡∏î‡πÄ‡∏á‡∏≤‡∏¢‡∏±‡∏Å‡∏©‡πå\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ß‡∏Ñ‡∏£‡∏≠‡∏ö‡∏á‡∏≥ ‡πÇ‡∏•‡∏Å‡∏î‡∏π‡πÑ‡∏£‡πâ‡∏´‡∏ß‡∏±‡∏á',
      '${enemy.toString()} ‡∏¢‡∏∑‡∏ô‡∏ô‡∏¥‡πà‡∏á‡∏î‡∏±‡πà‡∏á‡∏£‡∏π‡∏õ‡∏õ‡∏±‡πâ‡∏ô\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡∏±‡∏ß‡πÅ‡∏•‡πà‡∏ô‡∏õ‡∏£‡∏≤‡∏î ‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏™‡∏±‡πà‡∏ô‡∏Ñ‡∏•‡∏≠‡∏ô',
      '${enemy.toString()} ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ\n‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡∏£‡∏±‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏¢‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤',
      '${enemy.toString()} ‡πÅ‡∏ú‡πà‡∏ã‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ó‡∏±‡πà‡∏ß\n‡πÇ‡∏•‡∏Å‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏û‡∏£‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á‡∏£‡∏¥‡∏ö‡∏´‡∏£‡∏µ‡πà',
      '${enemy.toString()} ‡∏¢‡∏∑‡∏ô‡∏ï‡∏£‡∏∞‡∏´‡∏á‡πà‡∏≤‡∏ô\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î‡∏Å‡∏•‡∏∑‡∏ô‡∏Å‡∏¥‡∏ô‡πÅ‡∏™‡∏á ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÉ‡∏Å‡∏•‡πâ‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏ç',
      '${enemy.toString()} ‡∏¢‡∏¥‡πâ‡∏°‡πÄ‡∏¢‡∏≤‡∏∞\n‡πÇ‡∏•‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö‡∏°‡∏∑‡∏î‡∏°‡∏¥‡∏î ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á'
    ];

    return deathMessages[Random().nextInt(deathMessages.length)];
  }

  String _getRandomRestDialogue() {
    List<String> restDialogues = [
      "‡πÇ‡∏≠‡πÄ‡∏≠‡∏ã‡∏¥‡∏™‡∏£‡πà‡∏°‡∏£‡∏∑‡πà‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢",
      "‡∏£‡πà‡∏°‡πÄ‡∏á‡∏≤‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ô‡∏õ‡πà‡∏≤‡∏£‡πâ‡∏≠‡∏ô",
      "‡∏ñ‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô‡∏ä‡∏∑‡πâ‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏≤‡∏™‡∏π‡∏á",
      "‡∏ò‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡πÉ‡∏™‡∏Å‡∏•‡∏≤‡∏á‡∏õ‡πà‡∏≤‡∏ó‡∏∂‡∏ö",
      "‡∏•‡∏≤‡∏ô‡∏´‡∏ç‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏ó‡∏∏‡πà‡∏á‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ",
      "‡∏à‡∏∏‡∏î‡∏ä‡∏°‡∏ß‡∏¥‡∏ß‡∏ö‡∏ô‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡∏≤‡∏™‡∏π‡∏á",
      "‡∏•‡∏≥‡∏ò‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô‡πÉ‡∏ô‡∏´‡∏∏‡∏ö‡πÄ‡∏Ç‡∏≤‡∏•‡∏∂‡∏Å",
      "‡∏´‡∏≤‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏™‡∏á‡∏ö‡πÉ‡∏ï‡πâ‡∏î‡∏≤‡∏ß‡∏û‡∏£‡∏≤‡∏ß",
      "‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡πà‡∏≤‡∏°‡∏û‡∏≤‡∏¢‡∏∏",
      "‡∏ä‡∏≤‡∏¢‡∏ù‡∏±‡πà‡∏á‡∏™‡∏á‡∏ö‡∏£‡∏¥‡∏°‡∏ó‡∏∞‡πÄ‡∏•‡∏™‡∏≤‡∏ö‡∏Å‡∏ß‡πâ‡∏≤‡∏á"
    ];

    return restDialogues[Random().nextInt(restDialogues.length)];
  }

  void _generateTreasureEvent() {
    final itemType = _tableController.randomItem();
    final (exp, coin) = _tableController.itemReward(itemType);

    final treasureType = _getRandomTreasureType(itemType);
    final description = _getDescriptiveTreasureEvent(treasureType, itemType);

    final rewardDescription = "‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏û‡∏ö: $expüßø $coinüí∞";

    _updateEncounter("üé¥", "$description\n$rewardDescription");
    _addLogEntry("üé¥", "Treasure", "‡∏û‡∏ö $treasureType ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•!");

    expInput += exp;
    coinInput += coin;
  }

  String _getRandomTreasureType(int itemType) {
    return items[itemType][Random().nextInt(items[itemType].length)].toString();
  }

  String _getDescriptiveTreasureEvent(String treasureType, int itemType) {
    final List<List<String>> descriptiveEvents = [
      [
        "‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡∏û‡∏•‡∏¥‡πâ‡∏ß‡πÑ‡∏´‡∏ß‡πÅ‡∏™‡∏á‡∏£‡∏¥‡∏ö‡∏´‡∏£‡∏µ‡πà\n‡πÄ‡∏ú‡∏¢‡πÇ‡∏â‡∏° $treasureType ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏°‡∏µ",
        "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÇ‡∏•‡∏´‡∏∞‡∏î‡∏±‡∏á‡πÉ‡∏ï‡πâ‡∏ù‡πà‡∏≤‡πÄ‡∏ó‡πâ‡∏≤\n‡∏û‡∏ö $treasureType ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏≠‡∏Ñ‡∏≠‡∏¢",
        "‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏Å‡∏≤‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏ä‡∏¢‡∏°‡∏≤‡πÑ‡∏Å‡∏•\n‡∏ô‡∏≥‡∏û‡∏≤ $treasureType ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏Ç‡∏ß‡πà"
      ],
      [
        "‡πÄ‡∏á‡∏≤‡∏û‡∏¥‡∏•‡∏∂‡∏Å‡∏ö‡∏ô‡∏ú‡∏∑‡∏ô‡∏î‡∏¥‡∏ô\n‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ $treasureType ‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏¢‡∏•",
        "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡∏ô‡∏≥\n‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö $treasureType ‡∏•‡πâ‡∏≥‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡∏Å",
        "‡πÅ‡∏™‡∏á‡∏ß‡∏≤‡∏ö‡∏ß‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏™‡∏≤‡∏¢‡∏ï‡∏≤\n‡πÄ‡∏ú‡∏¢ $treasureType ‡∏ô‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
      ],
      [
        "‡∏û‡∏•‡∏±‡∏á‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏™‡∏±‡πà‡∏ô‡∏™‡∏∞‡πÄ‡∏ó‡∏∑‡∏≠‡∏ô\n‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà $treasureType ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏∑‡∏≠",
        "‡∏°‡πà‡∏≤‡∏ô‡∏û‡∏•‡∏±‡∏á‡πÑ‡∏´‡∏ß‡∏™‡∏∞‡∏ó‡πâ‡∏≤‡∏ô\n‡πÄ‡∏ú‡∏¢ $treasureType ‡∏õ‡∏£‡∏∞‡∏à‡∏±‡∏Å‡∏©‡πå‡∏ï‡∏≤",
        "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ö‡∏£‡∏£‡πÄ‡∏•‡∏á‡πÅ‡∏ß‡πà‡∏ß‡πÑ‡∏û‡πÄ‡∏£‡∏≤‡∏∞\n‡∏û‡∏≤ $treasureType ‡∏°‡∏≤‡πÄ‡∏™‡∏ô‡∏≠"
      ],
      [
        "‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏à‡πâ‡∏≤‡∏ü‡πâ‡∏≤‡∏™‡∏∞‡∏ó‡πâ‡∏≤‡∏ô\n$treasureType ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Å‡∏≤‡∏•",
        "‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô\n$treasureType ‡∏ï‡∏≥‡∏ô‡∏≤‡∏ô‡∏õ‡∏£‡∏≤‡∏Å‡∏è",
        "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏∂‡∏Å‡∏Å‡πâ‡∏≠‡∏á‡πÇ‡∏•‡∏Å‡πÇ‡∏ö‡∏£‡∏≤‡∏ì\n$treasureType ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏•‡∏õ‡∏£‡∏≤‡∏Å‡∏è"
      ]
    ];

    return descriptiveEvents[itemType]
        [Random().nextInt(descriptiveEvents[itemType].length)];
  }

  @override
  void onClose() {
    WakelockPlus.disable();
    _stopTimers();
    super.onClose();
  }
}
