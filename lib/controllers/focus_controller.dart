import 'package:get/get.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:work_adventure/controllers/character_controller.dart';
import 'package:work_adventure/controllers/table_controller.dart';

class LogEntry {
  final String icon;
  final String title;
  final String description;
  final DateTime timestamp;

  LogEntry({
    required this.icon,
    required this.title,
    required this.description,
    required this.timestamp,
  });
}

class MonsterName {
  final String emoji;
  final String name;
  final Color color;

  MonsterName(this.emoji, this.name, this.color);

  @override
  String toString() {
    return '$emoji $name';
  }
}

class FocusController extends GetxController {
  final CharacterController _characterController =
      Get.find<CharacterController>();
  final TableController _tableController = Get.find<TableController>();

  // Observable variables
  RxInt _timeRemaining = 3600.obs;
  final RxInt _totalTime = 3600.obs;
  final RxBool _isActive = false.obs;
  final RxList<LogEntry> _adventureLog = <LogEntry>[].obs;
  final RxString _currentEncounterIcon = "üåü".obs;
  final RxString _currentEncounterDescription =
      "Waiting for adventure...\n".obs;
  final RxInt eventCount = 0.obs;
  final RxBool _showingSummary = false.obs;
  RxInt spCounter = 0.obs;

  // Timers
  Timer? _timer;
  Timer? _eventTimer;
  Timer? _restTimer;
  Timer? _reviveTimer;

  // Getters
  int get timeRemaining => _timeRemaining.value;
  int get totalTime => _totalTime.value;
  bool get isActive => _isActive.value;
  List<LogEntry> get adventureLog => _adventureLog.toList();
  String get currentEncounterIcon => _currentEncounterIcon.value;
  String get currentEncounterDescription => _currentEncounterDescription.value;
  bool get showingSummary => _showingSummary.value;

  int get restDuration => _tableController.restTimer;

  // Other variables
  int rollOne = 0;

  // Quest variables
  String enemyQuestName = "";
  int enemyQuestCounter = 0;
  bool questIsActive = false;
  int questNumber = 21;
  int questGold = 0;
  int questExp = 0;
  int questEnemyNumber = 0;

  // Rest variables
  bool isRest = false;
  bool _isResting = false;

  int get _eventIntervalSeconds {
    if (_isResting) {
      return 0;
    }
    return _tableController.timeEventRun;
  }

  final RxInt _restTimeRemaining = 0.obs;

  final RxBool _isDead = false.obs;
  final RxInt _deathTimeRemaining = 0.obs;

  // Enemy data
  RxInt damageInput = 0.obs;
  RxInt expInput = 0.obs;
  RxInt coinInput = 0.obs;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏µ
  final Color easyColor = Colors.green;
  final Color mediumColor = Colors.blue;
  final Color hardColor = Colors.purple;
  final Color impossibleColor = Colors.orange;

  late List<List<MonsterName>> enemy;

  @override
  void onInit() {
    super.onInit();
    enemy = [
      [
        MonsterName("üê∫", "‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏à‡∏¥‡πã‡∏ß", easyColor),
        MonsterName("ü¶á", "‡∏Ñ‡πâ‡∏≤‡∏á‡∏Ñ‡∏≤‡∏ß‡∏£‡∏≤‡∏ï‡∏£‡∏µ", easyColor),
        MonsterName("üêó", "‡∏´‡∏°‡∏π‡∏õ‡πà‡∏≤‡∏û‡∏¥‡∏Ü‡∏≤‡∏ï", easyColor),
        MonsterName("ü¶ä", "‡∏à‡∏¥‡πâ‡∏á‡∏à‡∏≠‡∏Å‡πÑ‡∏ü", easyColor),
        MonsterName("üêç", "‡∏≠‡∏™‡∏£‡∏û‡∏¥‡∏©", easyColor)
      ],
      [
        MonsterName("üßü", "‡∏ã‡∏≠‡∏°‡∏ö‡∏µ‡πâ‡∏£‡∏≤‡∏ä‡∏≤", mediumColor),
        MonsterName("üíÄ", "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏≠‡∏°‡∏ï‡∏∞", mediumColor),
        MonsterName("üßõ", "‡πÅ‡∏ß‡∏°‡πÑ‡∏û‡∏£‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏¢‡πá‡∏ô", mediumColor),
        MonsterName("üê≤", "‡∏°‡∏±‡∏á‡∏Å‡∏£‡πÑ‡∏ü‡∏ô‡∏£‡∏Å", mediumColor),
        MonsterName("üßô", "‡∏û‡πà‡∏≠‡∏°‡∏î‡∏°‡∏£‡∏ì‡∏∞", mediumColor)
      ],
      [
        MonsterName("üêâ", "‡∏°‡∏±‡∏á‡∏Å‡∏£‡∏ó‡∏°‡∏¥‡∏¨", hardColor),
        MonsterName("üíÄ", "‡∏£‡∏≤‡∏ä‡∏≤‡∏•‡∏¥‡∏ä‡∏≠‡∏ô‡∏ò‡∏Å‡∏≤‡∏£", hardColor),
        MonsterName("üåë", "‡∏õ‡∏µ‡∏®‡∏≤‡∏à‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î", hardColor),
        MonsterName("üßõüèª‚Äç‚ôÇÔ∏è", "‡πÄ‡∏à‡πâ‡∏≤‡πÅ‡∏ß‡∏°‡πÑ‡∏û‡∏£‡πå‡πÑ‡∏£‡πâ‡∏û‡πà‡∏≤‡∏¢", hardColor),
        MonsterName("üßôüèª‚Äç‚ôÇÔ∏è", "‡∏à‡∏≠‡∏°‡∏°‡∏≤‡∏£‡πÅ‡∏´‡πà‡∏á‡∏´‡∏≤‡∏¢‡∏ô‡∏∞", hardColor)
      ],
      [
        MonsterName("üíÄ", "‡∏£‡∏≤‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì", impossibleColor),
        MonsterName("‚è≥", "‡πÄ‡∏ó‡∏û‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏•‡πÄ‡∏ß‡∏•‡∏≤", impossibleColor),
        MonsterName("üó°Ô∏è", "‡∏≠‡∏±‡∏®‡∏ß‡∏¥‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î", impossibleColor),
        MonsterName("üåô", "‡πÄ‡∏ó‡∏û‡∏à‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô", impossibleColor),
        MonsterName("üßô‚Äç‚ôÇÔ∏è", "‡∏à‡∏≠‡∏°‡πÄ‡∏ß‡∏ó‡πÅ‡∏´‡πà‡∏á‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå", impossibleColor)
      ]
    ];
    ever(_tableController.special, (_) {
      if (_isActive.value) {
        _startEventTimer();
      }
    });
  }

  // Session management methods
  void initFocus(int minutes) {
    _totalTime.value = minutes * 60;
    _timeRemaining.value = _totalTime.value;
    _resetSessionState();
    _addLogEntry("üèÅ", "Adventure Start", "Your journey begins!");
  }

  void toggleActive() {
    _isActive.toggle();
    if (_isActive.value) {
      _startTimer();
      _startEventTimer();
    } else {
      _stopTimers();
    }
  }

  void resetFocus() {
    _stopTimers();
    _timeRemaining.value = _totalTime.value;
    _resetSessionState();
    _addLogEntry("üîÑ", "Reset", "Your adventure has been reset.");
  }

  void showSummary() {
    _showingSummary.value = true;
    _addLogEntry("üèÅ", "Summary", "Adventure completed!");
  }

  // Timer methods
  void _startTimer() {
    _timer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (_timeRemaining.value > 0) {
        _timeRemaining--;
      } else {
        _endSession();
      }
    });
  }

  void _startEventTimer() {
    _eventTimer?.cancel();
    _eventTimer = Timer.periodic(Duration(seconds: _eventIntervalSeconds), (_) {
      if (_isActive.value && _timeRemaining.value > 0) {
        _isResting = false;
        generateEvent();
      }
    });
  }

  void _startRestTimer() {
    _restTimer?.cancel();

    final totalStaminaToRecover = _tableController.calculateCharacterStamina;
    final staminaPerSecond = totalStaminaToRecover / restDuration;

    _restTimer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (_restTimeRemaining.value > 0) {
        int restTime = restDuration + _eventIntervalSeconds + 1;
        _restTimeRemaining.value--;

        final elapsedTime = restTime - _restTimeRemaining.value;
        final recoveredStamina = (staminaPerSecond * elapsedTime).floor();

        spCounter.value = totalStaminaToRecover - (recoveredStamina ~/ 1.5);
      } else {
        spCounter.value = 0;
        _restTimer?.cancel();
        _startEventTimer(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏±‡∏Å
      }
    });
  }

  void _startReviveTimer() {
    _reviveTimer?.cancel();
    _reviveTimer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (_restTimeRemaining.value > 0) {
        _deathTimeRemaining.value--;
      } else {
        _isDead.value = false;
        _reviveTimer?.cancel();
        _startEventTimer(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏±‡∏Å
      }
    });
  }

  void _stopTimers() {
    _timer?.cancel();
    _eventTimer?.cancel();
    _restTimer?.cancel();
  }

  void _endSession() {
    _stopTimers();
    _isActive.value = false;
    showSummary();
  }

  void _resetSessionState() {
    _isActive.value = false;
    _isResting = false;
    _adventureLog.clear();
    _currentEncounterIcon.value = "üåü";
    _currentEncounterDescription.value = "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢...\n";
    eventCount.value = 0;
    _showingSummary.value = false;
    spCounter.value = 0;
    _restTimeRemaining.value = 0;
  }

  void expInputReset() {
    expInput.value = 0;
  }

  void coinInputReset() {
    expInput.value = 0;
  }

  // Event generation methods
  void generateEvent() {
    spCounter++;
    if (_tableController.timeToRest(spCounter.toInt())) {
      _generateRestEvent();
    } else {
      _generateRandomEvent();
    }
  }

  void _generateRandomEvent() {
    double luckBonus =
        _getSpecialPercentage(_characterController.special.value.luck);
    int ranNumber = Random().nextInt(100) + 1;
    if (ranNumber <= (30 - luckBonus * 100).clamp(5, 30)) {
      _generateNothingEvent();
    } else if (ranNumber <= 95) {
      _generateEnemyEvent();
    } else if (!questIsActive) {
      _generateVillageEvent();
    } else {
      _generateEnemyEvent();
    }
  }

  void _generateVillageEvent() {
    questIsActive = true;
    final villageType = _getRandomVillageType();
    final questDifficulty = _tableController.selectQuest;
    questNumber = questDifficulty;
    final MonsterName questDescription = _getQuestDescription(questDifficulty);
    final enemyCount = _tableController.enemyCount(questDifficulty);
    enemyQuestCounter = enemyCount;
    final (exp, gold) = _tableController.questReward(questDifficulty);
    questExp = exp;
    questGold = gold;
    questEnemyNumber = enemyCount;

    _updateEncounter("üè°", """
    $villageType
    ‡πÄ‡∏Ñ‡∏ß‡∏™: ‡∏Å‡∏≥‡∏à‡∏±‡∏î ${questDescription.toString()} $enemyCount ‡∏ï‡∏±‡∏ß
    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å: ${_getQuestDifficulty(questDifficulty)}
    ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: $exp EXP, $gold Gold
    """);

    _addLogEntry("üè°", "Village", "‡∏û‡∏ö $villageType ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™: ");
  }

  void _generateNothingEvent() {
    _updateEncounter("üå≤",
        "‡∏Ñ‡∏∏‡∏ì‡∏Å‡πâ‡∏≤‡∏ß‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ö‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏™‡∏á‡∏ö\n‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏°‡∏≤‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á\n‡∏≠‡∏±‡∏ô‡πÅ‡∏™‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì");
    _addLogEntry(
        "üåü", "Peaceful", "You continue your journey without incident.");
  }

  void _generateEnemyEvent() {
    rollOne = _tableController.singleDiceRoll();
    final index = TableController().getEnemyIndex(questNumber, questIsActive);
    final MonsterName enemy = _getRandomEnemy(index);
    final (enemyCoin, enemyDamage, enemyEXP) = _calculateEnemyStats(index);

    final battleDescription =
        _getBattleDescription(index, enemy, enemyDamage, enemyEXP, enemyCoin);
    _updateEncounter(enemy.emoji, battleDescription);
    _addLogEntry(
        "‚öîÔ∏è", "Battle", "Encountered a ${enemy.name}! $battleDescription");

    damageInput += enemyDamage;
    if (_tableController.healthReduceCondition(damageInput.value)) {
      expInput += enemyEXP;
      coinInput += enemyCoin;
    } else {
      _handleCharacterDeath(enemy);
    }
  }

  void _handleCharacterDeath(MonsterName enemy) {
    _isDead.value = true;
    _deathTimeRemaining.value = _tableController.timeTodie;
    final deathMessage = _getDeathMessage(enemy.toString());
    _updateEncounter("üíÄ", "$deathMessage\n${_deathTimeRemaining.value}");
    _addLogEntry("üíÄ", "Death", "Your character has fallen in battle.");

    _startReviveTimer();
  }

  String _getDeathMessage(String enemy) {
    final deathMessages = [
      "‡∏î‡∏ß‡∏á‡∏ï‡∏≤‡∏û‡∏£‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏ô $enemy ‡∏¢‡∏∑‡∏ô‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏¢‡∏¥‡πâ‡∏°",
      "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏µ‡∏î‡∏£‡πâ‡∏≠‡∏á $enemy ‡∏õ‡∏•‡∏¥‡∏î‡∏ä‡∏µ‡∏û‡∏ó‡πà‡∏≤‡∏ô",
      "‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÑ‡∏´‡∏•‡∏£‡∏¥‡∏ô $enemy ‡∏¢‡∏∑‡∏ô‡∏°‡∏≠‡∏á‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞",
      "‡πÅ‡∏™‡∏á‡∏£‡∏¥‡∏ö‡∏´‡∏£‡∏µ‡πà $enemy ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡∏∞‡∏Å‡πâ‡∏≠‡∏á",
      "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î‡πÇ‡∏≠‡∏ö‡∏•‡πâ‡∏≠‡∏° $enemy ‡∏ó‡∏≠‡∏î‡πÄ‡∏á‡∏≤‡∏¢‡∏±‡∏Å‡∏©‡πå"
    ];

    return deathMessages[Random().nextInt(deathMessages.length)];
  }

  void _generateRestEvent() {
    _isResting = true;
    int healing = _tableController.restHealing;
    int restDurationShow = restDuration + _eventIntervalSeconds + 1;
    damageInput.value -= (healing).clamp(0, damageInput.value);

    List<String> restDialogues = [
      "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡πÇ‡∏≠‡πÄ‡∏≠‡∏ã‡∏¥‡∏™‡∏£‡πà‡∏°‡∏£‡∏∑‡πà‡∏ô‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢",
      "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏£‡πà‡∏°‡πÄ‡∏á‡∏≤‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏õ‡πà‡∏≤‡∏£‡πâ‡∏≠‡∏ô",
      "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏ñ‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏≤‡∏™‡∏π‡∏á",
      "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏ò‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡πÉ‡∏™‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏õ‡πà‡∏≤‡∏ó‡∏∂‡∏ö",
      "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏•‡∏≤‡∏ô‡∏´‡∏ç‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏Ç‡∏à‡∏µ‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏∏‡πà‡∏á‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ",
      "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏ä‡∏°‡∏ß‡∏¥‡∏ß‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡∏≤‡∏™‡∏π‡∏á",
      "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏•‡∏≥‡∏ò‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏∏‡∏ö‡πÄ‡∏Ç‡∏≤‡∏•‡∏∂‡∏Å",
      "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏´‡∏≤‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏™‡∏á‡∏ö‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô‡∏î‡∏≤‡∏ß‡∏û‡∏£‡∏≤‡∏ß",
      "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏û‡∏≤‡∏¢‡∏∏",
      "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏ä‡∏≤‡∏¢‡∏ù‡∏±‡πà‡∏á‡∏™‡∏á‡∏ö‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏∞‡πÄ‡∏•‡∏™‡∏≤‡∏ö‡∏Å‡∏ß‡πâ‡∏≤‡∏á"
    ];

    String selectedDialogue =
        restDialogues[Random().nextInt(restDialogues.length)];

    _updateEncounter("üèïÔ∏è",
        "$selectedDialogue\n‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï $healingüî∫\n‡∏û‡∏±‡∏Å $restDurationShow ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
    _addLogEntry("üèïÔ∏è", "‡∏û‡∏±‡∏Å",
        "$selectedDialogue\nHP $healing ‡πÄ‡∏ß‡∏•‡∏≤ $restDurationShow ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");

    _restTimeRemaining.value = restDuration;
    _startRestTimer();
  }

  // Helper methods
  void _updateEncounter(String icon, String description) {
    _currentEncounterIcon.value = icon;
    _currentEncounterDescription.value = description;
  }

  void _addLogEntry(String icon, String title, String description) {
    _adventureLog.insert(
        0,
        LogEntry(
          icon: icon,
          title: title,
          description: description,
          timestamp: DateTime.now(),
        ));
  }

  double _getSpecialPercentage(int value) => value / 100;

  String _getRandomVillageType() {
    final villageTypes = [
      "üèòÔ∏è ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ä‡∏≤‡∏ß‡∏ô‡∏≤",
      "üè† ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ä‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏á",
      "üèöÔ∏è ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡∏£‡∏ö",
      "üè∞ ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡πà‡∏≠‡∏°‡∏î",
      "üóª ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏π‡πÄ‡∏Ç‡∏≤"
    ];
    return villageTypes[Random().nextInt(villageTypes.length)];
  }

  MonsterName _getQuestDescription(int difficulty) {
    return enemy[difficulty][Random().nextInt(enemy[difficulty].length)];
  }

  MonsterName _getRandomEnemy(int index) {
    return enemy[index][Random().nextInt(enemy[index].length)];
  }

  String _getQuestDifficulty(int difficulty) {
    final questDifficulties = ["‡∏á‡πà‡∏≤‡∏¢", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢", "‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"];
    return questDifficulties[difficulty];
  }

  (int, int, int) _calculateEnemyStats(int index) {
    int baseMax = (_characterController.calculateLevel(0) ~/ 2) + 3;
    final multipliers = [
      [1, 1, 1],
      [2, 3, 3],
      [4, 6, 6],
      [8, 12, 10]
    ];
    final baseValue =
        (((rollOne).clamp(1, baseMax)) * _tableController.levelMultiplier)
            .floor();

    int coin = (baseValue * 10) * multipliers[index][1];
    int damage = baseValue * multipliers[index][2];
    int exp = ((rollOne + 10).clamp(10, 20)) * multipliers[index][0];

    return (
      _tableController.calculateCoin(coin, index),
      _tableController.calculateDamage(damage),
      _tableController.calculateEXP(exp)
    );
  }

  // ... (previous code remains the same)

  String _getBattleDescription(
      int index, MonsterName enemy, int damage, int exp, int coin) {
    final battleDescriptions = [
      [
        "${enemy.toString()} ‡∏û‡∏∏‡πà‡∏á‡∏î‡∏±‡πà‡∏á‡∏™‡∏≤‡∏¢‡∏ü‡πâ‡∏≤\n‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏ã‡πá‡∏ô $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÅ‡∏´‡∏•‡∏Å‡∏•‡∏≤‡∏ç $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ï‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏á‡πÄ‡∏•‡πá‡∏ö\n‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏±‡πà‡∏ô $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏•‡πâ‡∏°‡∏Ñ‡∏£‡∏∑‡∏ô $expüßø $coinüí∞",
        "${enemy.toString()} ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÑ‡∏£‡πâ‡∏õ‡∏£‡∏≤‡∏ô‡∏µ\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡∏â‡∏µ‡∏Å $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏Ç‡∏≤‡∏î‡∏ß‡∏¥‡πà‡∏ô $expüßø $coinüí∞",
        "${enemy.toString()} ‡πÇ‡∏ú‡∏•‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏≤\n‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏∏‡πà‡∏á $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏¢‡∏±‡∏ö‡πÄ‡∏¢‡∏¥‡∏ô $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏Ñ‡∏≥‡∏£‡∏≤‡∏°‡∏™‡∏ô‡∏±‡πà‡∏ô\n‡πÅ‡∏ú‡∏•‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏™‡∏ö $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏∏‡∏¢‡∏ú‡∏á $expüßø $coinüí∞"
      ],
      [
        "${enemy.toString()} ‡πÇ‡∏â‡∏ö‡∏î‡∏±‡πà‡∏á‡∏û‡∏≤‡∏¢‡∏∏\n‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏î $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÅ‡∏´‡∏•‡∏Å‡∏•‡∏≤‡∏ç $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏£‡∏∏‡∏°‡πÄ‡∏£‡πâ‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏° $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏Ç‡∏≤‡∏î‡∏™‡∏∞‡∏ö‡∏±‡πâ‡∏ô $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ñ‡∏µ‡∏ö‡∏ó‡∏£‡∏á‡∏û‡∏•‡∏±‡∏á\n‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ß $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏•‡πâ‡∏°‡πÑ‡∏°‡πà‡∏•‡∏∏‡∏Å $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏´‡∏°‡∏∏‡∏ô‡∏î‡∏±‡πà‡∏á‡∏ó‡∏≠‡∏£‡πå‡∏ô‡∏≤‡πÇ‡∏î\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡∏Ç‡∏≤‡∏î $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏∏‡∏•‡∏µ $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ó‡∏∞‡∏¢‡∏≤‡∏ô‡∏ü‡∏≤‡∏î‡∏ü‡∏±‡∏ô\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏£‡∏∏‡∏ô $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÑ‡∏´‡∏°‡πâ‡πÄ‡∏Å‡∏£‡∏µ‡∏¢‡∏° $expüßø $coinüí∞"
      ],
      [
        "${enemy.toString()} ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏ó‡∏≥‡∏•‡∏≤‡∏¢\n‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏∞‡∏•‡∏±‡∏Å $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏¥‡πâ‡∏ô‡∏ã‡∏≤‡∏Å $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏û‡∏∏‡πà‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏™‡∏≤‡∏¢‡∏ï‡∏≤\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏´‡∏•‡∏Å $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏´‡∏≤‡∏¢‡∏ß‡∏±‡∏ö $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ó‡∏∞‡∏•‡∏∏‡∏°‡∏¥‡∏ï‡∏¥‡πÇ‡∏à‡∏°‡∏ï‡∏µ\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏´‡∏°‡πâ $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏π‡∏ç‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á $expüßø $coinüí∞",
        "${enemy.toString()} ‡πÅ‡∏ú‡πà‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏•‡πâ‡∏ô‡∏ü‡πâ‡∏≤\n‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏•‡∏≤‡∏¢ $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏†‡∏û $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ç‡∏ì‡∏∞\n‡∏à‡∏¥‡∏ï‡∏ó‡πà‡∏≤‡∏ô‡∏î‡∏±‡∏ö $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏∏‡∏Å‡∏°‡∏¥‡∏ï‡∏¥ $expüßø $coinüí∞"
      ],
      [
        "${enemy.toString()} ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ó‡∏±‡πà‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡∏Å $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏à‡∏£‡∏¥‡∏á $expüßø $coinüí∞",
        "${enemy.toString()} ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå\n‡∏ï‡∏±‡∏ß‡∏ó‡πà‡∏≤‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢ $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡πâ‡∏ô‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡πà‡∏á $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏Å‡∏é‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥\n‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏• $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏î‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á\n‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏ó‡∏£‡∏á‡∏à‡∏≥ $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏π‡πà‡πÑ‡∏£‡πâ‡∏ï‡∏±‡∏ß‡∏ï‡∏ô $expüßø $coinüí∞",
        "${enemy.toString()} ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏ï‡∏£‡∏£‡∏Å‡∏∞\n‡∏ó‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà $damageü©∏\n‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏•‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏• $expüßø $coinüí∞"
      ]
    ];

    return battleDescriptions[index]
        [Random().nextInt(battleDescriptions[index].length)];
  }

  @override
  void onClose() {
    _stopTimers();
    super.onClose();
  }
}
