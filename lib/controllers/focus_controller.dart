import 'package:get/get.dart';
import 'dart:async';
import 'dart:math';
import 'package:work_adventure/controllers/character_controller.dart';
import 'package:work_adventure/controllers/table_controller.dart';

class LogEntry {
  final String icon;
  final String title;
  final String description;
  final DateTime timestamp;

  LogEntry({
    required this.icon,
    required this.title,
    required this.description,
    required this.timestamp,
  });
}

class FocusController extends GetxController {
  final CharacterController _characterController =
      Get.find<CharacterController>();
  final TableController _tableController = Get.find<TableController>();

  // Observable variables
  RxInt _timeRemaining = 3600.obs;
  final RxInt _totalTime = 3600.obs;
  final RxBool _isActive = false.obs;
  final RxList<LogEntry> _adventureLog = <LogEntry>[].obs;
  final RxString _currentEncounterIcon = "üåü".obs;
  final RxString _currentEncounterDescription =
      "Waiting for adventure...\n".obs;
  final RxInt eventCount = 0.obs;
  final RxBool _showingSummary = false.obs;
  RxInt SPCounter = 0.obs;

  // Timers
  Timer? _timer;
  Timer? _eventTimer;
  Timer? _restTimer;

  // Getters
  int get timeRemaining => _timeRemaining.value;
  int get totalTime => _totalTime.value;
  bool get isActive => _isActive.value;
  List<LogEntry> get adventureLog => _adventureLog.toList();
  String get currentEncounterIcon => _currentEncounterIcon.value;
  String get currentEncounterDescription => _currentEncounterDescription.value;
  bool get showingSummary => _showingSummary.value;

  int get _eventIntervalSeconds => _tableController.timeEventRun;
  int get restDuration => _tableController.restTimer;

  // Other variables
  int rollOne = 0;

  // Quest variables
  String enemyQuestName = "";
  int enemyQuestCounter = 0;
  bool questIsActive = false;
  int questNumber = 21;
  int questGold = 0;
  int questExp = 0;
  int questEnemyNumber = 0;

  // Rest variables
  bool isRest = false;
  final RxBool _isResting = false.obs;
  final RxInt _restTimeRemaining = 0.obs;

  // Enemy data
  RxInt damageInput = 0.obs;
  RxInt expInput = 0.obs;
  RxInt coinInput = 0.obs;
  final List<List<String>> enemy = [
    [
      "üê∫ ‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏à‡∏¥‡πã‡∏ß",
      "ü¶á ‡∏Ñ‡πâ‡∏≤‡∏á‡∏Ñ‡∏≤‡∏ß‡∏£‡∏≤‡∏ï‡∏£‡∏µ",
      "üêó ‡∏´‡∏°‡∏π‡∏õ‡πà‡∏≤‡∏û‡∏¥‡∏Ü‡∏≤‡∏ï",
      "ü¶ä ‡∏à‡∏¥‡πâ‡∏á‡∏à‡∏≠‡∏Å‡πÑ‡∏ü",
      "üêç ‡∏≠‡∏™‡∏£‡∏û‡∏¥‡∏©"
    ],
    [
      "üßü ‡∏ã‡∏≠‡∏°‡∏ö‡∏µ‡πâ‡∏£‡∏≤‡∏ä‡∏≤",
      "üíÄ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏≠‡∏°‡∏ï‡∏∞",
      "üßõ ‡πÅ‡∏ß‡∏°‡πÑ‡∏û‡∏£‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏¢‡πá‡∏ô",
      "üê≤ ‡∏°‡∏±‡∏á‡∏Å‡∏£‡πÑ‡∏ü‡∏ô‡∏£‡∏Å",
      "üßô ‡∏û‡πà‡∏≠‡∏°‡∏î‡∏°‡∏£‡∏ì‡∏∞"
    ],
    [
      "üêâ ‡∏°‡∏±‡∏á‡∏Å‡∏£‡∏ó‡∏°‡∏¥‡∏¨",
      "üíÄ ‡∏£‡∏≤‡∏ä‡∏≤‡∏•‡∏¥‡∏ä‡∏≠‡∏ô‡∏ò‡∏Å‡∏≤‡∏£",
      "üåë ‡∏õ‡∏µ‡∏®‡∏≤‡∏à‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î",
      "üßõüèª‚Äç‚ôÇÔ∏è ‡πÄ‡∏à‡πâ‡∏≤‡πÅ‡∏ß‡∏°‡πÑ‡∏û‡∏£‡πå‡πÑ‡∏£‡πâ‡∏û‡πà‡∏≤‡∏¢",
      "üßôüèª‚Äç‚ôÇÔ∏è ‡∏à‡∏≠‡∏°‡∏°‡∏≤‡∏£‡πÅ‡∏´‡πà‡∏á‡∏´‡∏≤‡∏¢‡∏ô‡∏∞"
    ],
    [
      "üíÄ ‡∏£‡∏≤‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì",
      "‚è≥ ‡πÄ‡∏ó‡∏û‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏•‡πÄ‡∏ß‡∏•‡∏≤",
      "üó°Ô∏è ‡∏≠‡∏±‡∏®‡∏ß‡∏¥‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î",
      "üåô ‡πÄ‡∏ó‡∏û‡∏à‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô",
      "üßô‚Äç‚ôÇÔ∏è ‡∏à‡∏≠‡∏°‡πÄ‡∏ß‡∏ó‡πÅ‡∏´‡πà‡∏á‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå"
    ]
  ];

  @override
  void onInit() {
    super.onInit();
    ever(_tableController.special, (_) {
      if (_isActive.value) {
        _startEventTimer();
      }
    });
  }

  // Session management methods
  void initFocus(int minutes) {
    _totalTime.value = minutes * 60;
    _timeRemaining.value = _totalTime.value;
    _resetSessionState();
    _addLogEntry("üèÅ", "Adventure Start", "Your journey begins!");
  }

  void toggleActive() {
    _isActive.toggle();
    if (_isActive.value) {
      _startTimer();
      _startEventTimer();
    } else {
      _stopTimers();
    }
  }

  void resetFocus() {
    _stopTimers();
    _timeRemaining.value = _totalTime.value;
    _resetSessionState();
    _addLogEntry("üîÑ", "Reset", "Your adventure has been reset.");
  }

  void showSummary() {
    _showingSummary.value = true;
    _addLogEntry("üèÅ", "Summary", "Adventure completed!");
  }

  // Timer methods
  void _startTimer() {
    _timer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (_timeRemaining.value > 0) {
        _timeRemaining--;
      } else {
        _endSession();
      }
    });
  }

  void _startEventTimer() {
    _eventTimer?.cancel();
    _eventTimer = Timer.periodic(Duration(seconds: _eventIntervalSeconds), (_) {
      if (_isActive.value && _timeRemaining.value > 0) {
        generateEvent();
      }
    });
  }

  void _startRestTimer() {
    _restTimer?.cancel();
    final staminaPerSecond =
        _tableController.calculateCharacterStamina / restDuration;

    _restTimer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (_restTimeRemaining.value > 0) {
        _restTimeRemaining.value--;

        final elapsedTime = restDuration - _restTimeRemaining.value;
        final recoveredStamina = (staminaPerSecond * elapsedTime).floor();

        SPCounter.value = _tableController.calculateCharacterStamina -
            (recoveredStamina ~/ 1.5);
      } else {
        _finishResting();
      }
    });
  }

  void _finishResting() {
    _isResting.value = false;
    SPCounter.value = 0;
    _restTimer?.cancel();
    _startEventTimer(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏±‡∏Å
  }

  void _stopTimers() {
    _timer?.cancel();
    _eventTimer?.cancel();
    _restTimer?.cancel();
  }

  void _endSession() {
    _stopTimers();
    _isActive.value = false;
    showSummary();
  }

  void _resetSessionState() {
    _isActive.value = false;
    _isResting.value = false;
    _adventureLog.clear();
    _currentEncounterIcon.value = "üåü";
    _currentEncounterDescription.value = "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢...\n";
    eventCount.value = 0;
    _showingSummary.value = false;
    SPCounter.value = 0;
    _restTimeRemaining.value = 0;
  }

  void expInputReset() {
    expInput.value = 0;
  }

  void coinInputReset() {
    expInput.value = 0;
  }

  // Event generation methods
  void generateEvent() {
    if (!_isResting.value) {
      SPCounter++;
      if (_tableController.timeToRest(SPCounter.toInt())) {
        _generateRestEvent();
      } else {
        _generateRandomEvent();
      }
    }
  }

  void _generateRandomEvent() {
    double luckBonus =
        _getSpecialPercentage(_characterController.special.value.luck);
    int ranNumber = Random().nextInt(100) + 1;
    if (ranNumber <= (30 - luckBonus * 100).clamp(5, 30)) {
      _generateNothingEvent();
    } else if (ranNumber <= 95) {
      _generateEnemyEvent();
    } else if (!questIsActive) {
      _generateVillageEvent();
    } else {
      _generateEnemyEvent();
    }
  }

  void _generateVillageEvent() {
    questIsActive = true;
    final villageType = _getRandomVillageType();
    final questDifficulty = _tableController.selectQuest;
    questNumber = questDifficulty;
    final questDescription = _getQuestDescription(questDifficulty);
    final enemyCount = _tableController.enemyCount(questDifficulty);
    enemyQuestCounter = enemyCount;
    final (exp, gold) = _tableController.questReward(questDifficulty);
    questExp = exp;
    questGold = gold;
    questEnemyNumber = enemyCount;

    _updateEncounter("üè°", """
    $villageType
    ‡πÄ‡∏Ñ‡∏ß‡∏™: ‡∏Å‡∏≥‡∏à‡∏±‡∏î $questDescription $enemyCount ‡∏ï‡∏±‡∏ß
    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å: ${_getQuestDifficulty(questDifficulty)}
    ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: $exp EXP, $gold Gold
    """);

    _addLogEntry("üè°", "Village", "‡∏û‡∏ö $villageType ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™: ");
  }

  void _generateNothingEvent() {
    _updateEncounter("üå≤",
        "‡∏Ñ‡∏∏‡∏ì‡∏Å‡πâ‡∏≤‡∏ß‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ö‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏™‡∏á‡∏ö\n‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏°‡∏≤‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á\n‡∏≠‡∏±‡∏ô‡πÅ‡∏™‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì");
    _addLogEntry(
        "üåü", "Peaceful", "You continue your journey without incident.");
  }

  void _generateEnemyEvent() {
    rollOne = _tableController.singleDiceRoll();
    final index = TableController().getEnemyIndex(questNumber, questIsActive);
    final enemy = _getRandomEnemy(index);
    final (enemyCoin, enemyDamage, enemyEXP) = _calculateEnemyStats(index);

    final battleDescription =
        _getBattleDescription(index, enemy, enemyDamage, enemyEXP, enemyCoin);
    _updateEncounter(enemy.split(" ")[0], battleDescription);
    _addLogEntry("‚öîÔ∏è", "Battle",
        "Encountered a ${enemy.split(" ").sublist(1).join(" ")}! $battleDescription");

    damageInput += enemyDamage;
    expInput += enemyEXP;
    coinInput += enemyCoin;
  }

  void _generateRestEvent() {
    _isResting.value = true;
    double intelligenceBonus =
        _getSpecialPercentage(_characterController.special.value.intelligence);
    int healing = (Random().nextInt(31) + 20 * (1 + intelligenceBonus)).round();
    int restDurationShow = restDuration + _eventIntervalSeconds + 1;

    _updateEncounter("üèïÔ∏è",
        "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥\n‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô $healing ‡∏´‡∏ô‡πà‡∏ß‡∏¢\n‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å: $restDurationShow ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
    _addLogEntry("üèïÔ∏è", "‡∏û‡∏±‡∏Å",
        "‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏£‡∏±‡∏Å‡∏©‡∏≤ $healing HP\n‡∏û‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ $restDurationShow ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");

    _restTimeRemaining.value = restDuration;
    _startRestTimer();
  }

  // Helper methods
  void _updateEncounter(String icon, String description) {
    _currentEncounterIcon.value = icon;
    _currentEncounterDescription.value = description;
  }

  void _addLogEntry(String icon, String title, String description) {
    _adventureLog.insert(
        0,
        LogEntry(
          icon: icon,
          title: title,
          description: description,
          timestamp: DateTime.now(),
        ));
  }

  double _getSpecialPercentage(int value) => value / 100;

  String _getRandomVillageType() {
    final villageTypes = [
      "üèòÔ∏è ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ä‡∏≤‡∏ß‡∏ô‡∏≤",
      "üè† ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ä‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏á",
      "üèöÔ∏è ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡∏£‡∏ö",
      "üè∞ ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡πà‡∏≠‡∏°‡∏î",
      "üóª ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏π‡πÄ‡∏Ç‡∏≤"
    ];
    return villageTypes[Random().nextInt(villageTypes.length)];
  }

  String _getQuestDescription(int difficulty) {
    return enemy[difficulty][Random().nextInt(enemy[difficulty].length)];
  }

  String _getQuestDifficulty(int difficulty) {
    final questDifficulties = ["‡∏á‡πà‡∏≤‡∏¢", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢", "‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"];
    return questDifficulties[difficulty];
  }

  String _getRandomEnemy(int index) {
    return enemy[index][Random().nextInt(enemy[index].length)];
  }

  (int, int, int) _calculateEnemyStats(int index) {
    final multipliers = [
      [1, 1, 1],
      [2, 3, 3],
      [4, 6, 6],
      [8, 12, 10]
    ];
    final baseValue = (rollOne).clamp(1, 10);

    int coin = baseValue * multipliers[index][1];
    int damage = baseValue * multipliers[index][2];
    int exp = ((rollOne + 10).clamp(10, 20)) * multipliers[index][0];

    return (
      _tableController.calculateCoin(coin, index),
      _tableController.calculateDamage(damage),
      _tableController.calculateEXP(exp)
    );
  }

  // ... (previous code remains the same)

  String _getBattleDescription(
      int index, String enemy, int damage, int exp, int coin) {
    final battleDescriptions = [
      [
        "$enemy ‡∏û‡∏∏‡πà‡∏á‡πÉ‡∏™‡πà\n‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏ã‡πá‡∏ô $damageü©∏\n‡∏ö‡∏î‡∏Ç‡∏¢‡∏µ‡πâ‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏£‡∏≤‡∏ö‡∏Ñ‡∏≤‡∏ö $expüßø $coinüí∞",
        "$enemy ‡∏ï‡∏ß‡∏±‡∏î‡πÄ‡∏•‡πá‡∏ö\n‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏±‡πà‡∏ô $damageü©∏\n‡∏´‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡πâ‡∏¢‡∏ß‡πÄ‡∏•‡πá‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏¥‡πâ‡∏ô $expüßø $coinüí∞",
        "$enemy ‡πÇ‡∏à‡∏°‡∏ï‡∏µ\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡∏â‡∏µ‡∏Å $damageü©∏\n‡πÄ‡∏ä‡∏∑‡∏≠‡∏î‡πÄ‡∏â‡∏∑‡∏≠‡∏ô‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏Ç‡∏≤‡∏î‡∏ß‡∏¥‡πà‡∏ô $expüßø $coinüí∞",
        "$enemy ‡πÇ‡∏ú‡∏•‡πà‡∏°‡∏≤\n‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏∏‡πà‡∏á $damageü©∏\n‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏¢‡πà‡∏≠‡∏¢‡∏¢‡∏±‡∏ö $expüßø $coinüí∞",
        "$enemy ‡∏Ñ‡∏≥‡∏£‡∏≤‡∏°\n‡πÅ‡∏ú‡∏•‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏î‡∏á‡∏â‡∏≤‡∏ô $damageü©∏\n‡∏ö‡∏î‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏ì $expüßø $coinüí∞"
      ],
      [
        "$enemy ‡πÇ‡∏â‡∏ö‡∏•‡∏á\n‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏î $damageü©∏\n‡∏â‡∏µ‡∏Å‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÜ $expüßø $coinüí∞",
        "$enemy ‡∏£‡∏∏‡∏°‡πÄ‡∏£‡πâ‡∏≤\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏° $damageü©∏\n‡∏ö‡∏±‡πà‡∏ô‡∏Ñ‡∏≠‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏Ç‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô $expüßø $coinüí∞",
        "$enemy ‡∏ñ‡∏µ‡∏ö\n‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ß $damageü©∏\n‡∏ó‡∏¥‡πâ‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ã‡∏≤‡∏Å‡∏®‡∏û $expüßø $coinüí∞",
        "$enemy ‡∏´‡∏°‡∏∏‡∏ô‡πÇ‡∏à‡∏°‡∏ï‡∏µ\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏´‡∏•‡∏Å $damageü©∏\n‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ã‡∏≤‡∏Å $expüßø $coinüí∞",
        "$enemy ‡∏ó‡∏∞‡∏¢‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏£‡∏∏‡∏ô $damageü©∏\n‡πÄ‡∏ú‡∏≤‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏ì $expüßø $coinüí∞"
      ],
      [
        "$enemy ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏û‡∏•‡∏±‡∏á\n‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏∞‡∏•‡∏±‡∏Å $damageü©∏\n‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏•‡πâ‡∏≤‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏¥‡πâ‡∏ô‡∏ã‡∏≤‡∏Å $expüßø $coinüí∞",
        "$enemy ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏ï‡∏≤\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏´‡∏•‡∏Å‡∏•‡∏≤‡∏ç $damageü©∏\n‡∏•‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥ $expüßø $coinüí∞",
        "$enemy ‡∏ó‡∏∞‡∏•‡∏∏‡∏°‡∏¥‡∏ï‡∏¥\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏´‡∏°‡πâ‡πÄ‡∏Å‡∏£‡∏µ‡∏¢‡∏° $damageü©∏\n‡∏ö‡∏î‡∏Ç‡∏¢‡∏µ‡πâ‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏π‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ $expüßø $coinüí∞",
        "$enemy ‡πÅ‡∏ú‡πà‡∏≠‡∏≥‡∏ô‡∏≤‡∏à\n‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏•‡∏≤‡∏¢ $damageü©∏\n‡∏•‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏†‡∏û‡∏†‡∏π‡∏°‡∏¥ $expüßø $coinüí∞",
        "$enemy ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤\n‡∏à‡∏¥‡∏ï‡∏ó‡πà‡∏≤‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏ç $damageü©∏\n‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏•‡πâ‡∏≤‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏°‡∏¥‡∏ï‡∏¥ $expüßø $coinüí∞"
      ],
      [
        "$enemy ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πÅ‡∏´‡πà‡∏á\n‡∏£‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡∏Å‡∏î‡∏±‡∏ö $damageü©∏\n‡∏•‡πâ‡∏≤‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á $expüßø $coinüí∞",
        "$enemy ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô\n‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏π‡∏ç‡∏™‡∏¥‡πâ‡∏ô $damageü©∏\n‡∏Å‡∏ß‡∏≤‡∏î‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡πâ‡∏ô‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡πà‡∏á $expüßø $coinüí∞",
        "$enemy ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏Å‡∏é‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥\n‡∏ó‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏•‡πÄ‡∏ß‡∏•‡∏≤ $damageü©∏\n‡∏ú‡∏•‡∏≤‡∏ç‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ $expüßø $coinüí∞",
        "$enemy ‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á\n‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥ $damageü©∏\n‡∏ö‡∏î‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏™‡∏π‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ï‡∏ô $expüßø $coinüí∞",
        "$enemy ‡∏Å‡πâ‡∏≤‡∏ß‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏£‡∏£‡∏Å‡∏∞\n‡∏ó‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á $damageü©∏\n‡∏•‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡∏£‡∏á‡∏≠‡∏¢‡∏π‡πà $expüßø $coinüí∞"
      ]
    ];

    return battleDescriptions[index]
        [Random().nextInt(battleDescriptions[index].length)];
  }

  @override
  void onClose() {
    _stopTimers();
    super.onClose();
  }
}
